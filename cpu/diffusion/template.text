<html>
<head>
<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
<meta content="utf-8" http-equiv="encoding">
<title>%(TITlE)s</title>
<link rel="stylesheet" href="diffusion_style.css" type="text/css">
<script type="text/x-mathjax-config">
MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
</head>
<body onload="javascript:waitForMathJax()">
<div class="overlay" style="margin:auto auto; height:100%; width:100%; font-size:80%;" id="hidingframe">
<div class="outer">
<div class="middle">
<center>
Please wait while the simulation loads<br/>
This page requires JavaScript and access to the MathJax servers.<br/><br/>
<img src="loader.gif"/>
</center>
</div>
</div>
</div>
<div class="clickblocker" style="margin:auto auto; height:100%; width:100%;" id="clickblock"> </div>
<div class="outer" id="mainframe">
<div class="middle">
<div id='canvasdiv'>
    <div class="controlbox" style="font-size:85%;position:relative;">
        <div style="clear:both;display:block">
            %(CONTROL_LIST)s
            <div class="controls">
                %(CONTROL_GROUPNAME)s
                <div class="control">%(CONTROL_DISPLAY_STRING)s  
                    <input type="number" 
                        step="%(CONTROL_STEP_SIZE)s" 
                        max="%(CONTROL_MAX)s" 
                        min="%(CONTROL_MIN)s"    
                        name="%(CONTROL_VARNAME)s"  
                        value="%(CONTROL_INITIAL)s"/>
                </div>
                // ... more controls here
            </div>
            // ... more control groups here
        </div>   
        
        <div style="position:absolute;bottom:0;left:0;">
        <div class="controltext">Presets</div>
        <div class="button_container" id="presets"></div>        
        </div>        
    </div>
    
    <div style="position:relative;">
    <canvas id='maincanvas' style="position:absolute; left:200px; z-index: 1;">
    This application relies on the HTML5 Canvas element and Javascript. 
    If you have Javascript disabled, try re-enabling it for this page.
    </canvas>
    

    <div id='canvasoverlay' style="position:absolute; left:200px; z-index: 2;">
        <div style="display: table-cell; vertical-align: middle;">
        Click to start
        </div>
    </div>
    
    </div>

    <!-- just here for padding -->
    <div class="infotext">
        <h3 style="margin-top:0px;">%(TITLE)s</h3>
        <span style="font-size:80%;">
        %(ABOUT)s
        </span>
        <br/>    

        <div class="controltext" style="width:240px;">
        </div>
        <div class="controltext" style="width:240px;">
            Simulation
        </div>
        <div class="button_container">
            <input class="button" type="button" value="Start"/>
            <input class="button" type="button" value="Step"/>
            <input class="button" type="button" value="Save"/>
            <input class="button" type="button" value="Load"/>
            <input class="button" type="button" value="Randomize"/>
        </div>
    </div>
    
    <div id="equation">%(EQUATIONS)s</div>
</div>
</div>
</div>


<script type="text/javascript" src="./gaussian_convolution.js"></script> 

<script type="text/javascript">
function main() {
    /* 
    Prepare rendering canvas 
    
    The canvas element and the div that contains it are identified by Id
    
    There is a scaling factor between the size of the image buffer that backs
    the canvas, and the actual displayed size of the canvas. These computations
    are very expensive, so we run the simulation at a resolution that is 
    courser than the display.
    
    The downscale variable is a power of 2. So a downscale value of "2" 
    corresponds to a scaling factor of 4. 
    
    We exctract the canvas context and the image data object from that
    context. We use the context to blit pixels to the canvas later. 
    
    The image data is a byte packed int32 ARGB format. We create a Uint32
    "view" of this data buffer which can be accessed as an array "data". 
    
    This image buffer is initialized with a checkerboard pattern to verify 
    that everything is properly configured.
    */
    console.log('Initializing...');
    
    // elements that cover things up during initialization
    var hidingframe   = document.getElementById('hidingframe');
    var canvasoverlay = document.getElementById('canvasoverlay');
    var clickblock    = document.getElementById('clickblock');
    
    var canvas = document.getElementById('maincanvas');
    var frame  = document.getElementById('canvasdiv');
    
    var downscale = 1;
    var W  = canvas.clientWidth >>downscale;
    var H  = canvas.clientHeight>>downscale;
    canvas.width  = W*2; 
    canvas.height = H*2; 
    
    var N = W*H;
    
    var ctx = canvas.getContext('2d');
    var imageData = ctx.getImageData(0,0,W*2,H*2);
    var data = new Uint32Array(imageData.data.buffer);
    
    for (var y=0;y<H*2;y++)
        for (var x=0;x<W*2;++x)
            data[x+W*y*2] = 0xff000000 | ((x^y)&1)*0xffffff;
    ctx.putImageData(imageData, 0, 0);     
        
    /* 
    Prepare data structures for simulation
    
    We need four buffers to model this system. For each of the E and I
    population we need a buffer to store the current values Ue and Ui
    and also a buffer to store the intermediate results of a 
    convolution, defining the lateral connectivity. Buffers are
    initialized by number of bytes, and float32s take up 4 butes.
    */
    var running = 0;

    var CONVOLUTION = blurGaussianFloat32SeparableAnisotropicAbsorbingRenormalizingPowerOfTwoSize;

    %(PARAMETER_DECLARATIONS)s
    %(HELPER_FUNCTIONS)s
    %(FIELD_INITIALIZERS)s
        
    var plot_padding = 72>>downscale;
    var SW = W-plot_padding|0;
    
    %(ZERO_FINDING_TEMPLATE_FUNCTIONS)s
    .. e.g. ...
    function locate_zeros(buffer1,buffer2) {
        /* Assuming homogenous case locate zeros, in this case by brute 
        force grid search */
        var minx=-1;
        var miny=-1;
        var best=1e30;  
        for (var y=0; y<SW; y++) {
            var ui = y/SW
            for (var x=0; x<SW; x++) {
                var i   = x+SW*y;
                var ue  = x/SW
                var due = %(ZEROS_EQUATION_1_X)s;
                var dui = %(ZEROS_EQUATION_1_Y)s;
                if (buffer1!=null) buffer1[i] = due;
                if (buffer2!=null) buffer2[i] = dui;
                var mag = due*due+dui*dui;
                if (mag<best) {
                    best = mag;
                    minx = x;
                    miny = y;
                }
            }
        }
        return {x:minx,y:miny}
    }
    
        
    function render_scatter() {
        /*
        render distribution of E/I positions in phase space
        in the bottom left of the display
        */
        var W2 = W*2;
        var offset = plot_padding*(W+1)+H*W2;
        for (var y=1; y<H; y++) {
            for (var x=1; x<W; x++) {
                var i = x+y*W;
                var a = (Ue[i]*SW|0)+plot_padding/2
                var b = ((1.-Ui[i])*SW|0)+plot_padding/2
                if (mask[i]>0.5) { // in stim region
                    var j = a+b*W2+W2*H+W;
                    data[j] = 0x01010101*(255-((255-((data[j])&0xff))*0.5|0));
                } else { // in periphery
                    var j = a+b*W2+W2*H;
                    data[j] = 0x01010101*(255-((255-((data[j])&0xff))*0.75|0));
                }
            }
        }
        var p = locate_zeros(temp,temp2);
        // trace nullclines
        for (var y=1; y<SW; y++) {
            for (var x=1; x<SW; x++) {
                var i = x+SW*y;
                if ((temp [i]>0)!=(temp [i-1]>0)||
                    (temp [i]>0)!=(temp [i-SW]>0)) {
                    var j = x+(SW-y)*W2
                          + plot_padding/2+W2*plot_padding/2+W2*H;
                    data[j]=0xff00ff00;
                }
                if ((temp2[i]>0)!=(temp2[i-1]>0)||
                    (temp2[i]>0)!=(temp2[i-SW]>0)) {
                    var j = x+(SW-y)*W2
                          + plot_padding/2+W2*plot_padding/2+W2*H;
                    data[j]=0xff0088ff;                    
                }
            }
        }
        // hilight intersection of nullclines
        offset = p.x+(SW-p.y)*W2;
        offset += plot_padding/2+W2*plot_padding/2+W2*H;
        for (var dy=-2;dy<3;dy++) {
            var y=dy*W2+offset;
            for (var dx=-2;dx<3;dx++) {
                data[dx+y]=0xffff00ff;
            }
        }
        
        //do that again for the stimulated region
        var p = locate_zeros_noadaptation(temp,temp2);
        // trace nullclines
        for (var y=1; y<SW; y++) {
            for (var x=1; x<SW; x++) {
                var i = x+SW*y;
                if ((temp [i]>0)!=(temp [i-1]>0)||
                    (temp [i]>0)!=(temp [i-SW]>0)) {
                    var j = x+W+(SW-y)*W2
                          + plot_padding/2+W2*plot_padding/2+W2*H;
                    data[j]=0xffff0088;
                }
                if ((temp2[i]>0)!=(temp2[i-1]>0)||
                    (temp2[i]>0)!=(temp2[i-SW]>0)) {
                    var j = x+W+(SW-y)*W2
                          + plot_padding/2+W2*plot_padding/2+W2*H;
                    data[j]=0xff8800ff;                    
                }
            }
       }
        // hilight intersection of nullclines
        offset = p.x+(SW-p.y)*W2;
        offset += plot_padding/2+W2*plot_padding/2+W2*H+W;
        for (var dy=-2;dy<3;dy++) {
            var y=dy*W2+offset;
            for (var dx=-2;dx<3;dx++) {
                data[dx+y]=0xffff00ff;
            }
        }
    }
    
    
    function sim2image() {
        var dY = H*2*W;
        for (var y=0;y<W;y++) {
            var Y = y*W*2;
            for (var x=0;x<W;x++) {
                i = x+y*W;
                var UE = Ue[i]*255|0;
                var UI = Ui[i]*255|0;
                var VE = Ve[i]*255|0;
                var UB = Math.abs(UE-UI)|0;
                var VB = Math.abs(VE)|0;
                data[  x + Y   ] = (UB*0x010000) + UI*(0x0100) + (UE*0x01) + 0xff000000;
                data[x+W + Y   ] = (VB*0x010000) + (VE*0x01) + 0xff000000;
                data[  x + Y+dY] = 0x00000000;
                data[x+W + Y+dY] = 0x00000000;
            }
        }
        render_scatter();
    }
    
    function showSim() {
        sim2image();
        ctx.putImageData(imageData, 0, 0);      
    }
       
    var rand = Math.floor(Math.random()*0x1000000);
    function seedrand() { 
        rand = Math.floor(Math.random()*0x1000000);}
    function weakrand() { 
        return ((rand^=rand>>2^rand<<1)&0xffff) * 1.52587890625e-05;}
    
    // initialization functions
    function randomize() {
        for (var y=0;y<H;++y) { seedrand();
        for (var x=0;x<W;++x) {
            var i = x+W*y;
            Ue[i] = weakrand();
            Ui[i] = weakrand();
            Ve[i] = Ue[i];
        }}
        showSim();
    }
    function nothing() {}
    randomize();
    
    /*
    Prepare the user interface controls.
    All input fields have been given names that match local variable
    names. Rather than register an input-changed callback, currently we
    just poll input fields before each simulation update. First, we
    set the values of all input fields to match the initial state of these
    local control variables.
    */
    var inputs = document.getElementsByTagName("input");
    var controls = [];
    for (var i=0; i<inputs.length; i++)
        if (inputs[i].type=='number')
            controls.push(inputs[i]);
    function setcontrols() {
        for (var i=0; i<controls.length; i++) {
            var control = controls[i];
            eval('control.value='+control.name);
        }
    }
    setcontrols();
    var buttons = [];
    var stopstartbutton; //needs to get modified so we need a handle to it
    for (var i=0; i<inputs.length; i++) {
        var button = inputs[i];
        if (button.type=='button') {
            buttons.push(button);
            button.onclick = (function(button){return function(click) {
                eval(button.value.replace(/\s/g,'').toLowerCase()+'()');
            };})(button);
            if (button.value=='Start') {
                stopstartbutton=button;
                button.style.width = button.offsetWidth;
            }
        }
    }
    function start() {
        if (!running) {
            running = 1;
            setTimeout(iterate, 0);
        }
        stopstartbutton.value="Stop";
        canvasoverlay.style.display = "none";
    }
    function stop() {
        if (running) running = 0;
        stopstartbutton.value="Start";
    }
    function step() {
        stop();
        iterate();
    }
    function statestring() {
        var state='';
        for (var i=0; i<controls.length; i++) {
            var control = controls[i];
            state += control.name+'='+control.value+';';
        }
        return state;
    }
    function save() {
        var wasrunning = running;
        stop();
        prompt("Copy (control+C) these parameters & record them.\nThey can be reloaded using the 'Load' button.\n", statestring());
        if (wasrunning) start();
    }
    function loadstring(s) {
        eval(s);
        setcontrols();
        randomize();
        start();
    }
    function load() {
        stop();
        result = prompt("Paste saved parameters below:\n","");
        if (result) loadstring(result);
    }

    presets=[
    ['default','randomize','Ti=10;Aie=10;Aei=10;Hi=0;Te=5;Aee=10;Se=1;He=0;Ta=50;Be=1;dt=1;Ge=1;Ne=1;'],
    ['percolate','randomize','Ti=3;Aie=3;Hi=1.5;Te=3;Aee=9.4;Aei=5;Se=0.2;He=1.2;Ta=200;Ga=200;Be=1.8;dt=1;Amp=0;Ge=0;Ne=1.5;']
    ];
    
    /*
    Create the preset buttons. Flicker buttons have their name shown. 
    Fun preset buttons use a different class that displays the info string
    on the top left of the page on hover
    */ 
    preset_container = document.getElementById('presets');
    
    for (var i=0; i<presets.length; i++) {
        var name = presets[i][0];
        var init = eval(presets[i][1]);
        var pdat = presets[i][2];
        var ps = document.createElement("div");
        ps.setAttribute("class","squarebutton");
        ps.innerHTML = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzαβγδεφθιηκλμνπρστυωξψζΓΔΦΘΚΛΠΡΣΩΞΨ'[i];
        var st = document.createElement("div");
        st.setAttribute("class","info");
        st.innerHTML = name;
        ps.appendChild(st);
        ps.onclick   = (function(name,init,pdat){
            return function() {
                init();
                eval(pdat);
                setcontrols();
                console.log(name);
                start();
            };})(name,init,pdat);
        preset_container.appendChild(ps);
    }
    console.log('Presets loaded');
       
    function updateState(t) {    
        //console.log('updateState '+t);
        var tet = dt/Te;
        var tit = dt/Ti;
        var tat = dt/Ta;
        var se = -He-0.5*Ne;
        var Ce = (1-Se*4);

        var ue,ui,ve,prev,next,abov,down,Lp,dUe,dUi,dVe,v,s;

        for (var y=0;y<H;y++) {
            var Y=y*W;
            var dy=y-middle;

            var ydown = y>1?(y-1)*W:(H-1)*W;
            var yabov = y<H-1?(y+1)*W:0;

            ue   = Ue[Y+W-1];
            next = Ue[Y+0];

            for (var x=0;x<W;x++) {
                var i=x+Y;
                var dx = x-middle;

                prev = ue;
                ue = next;
                next = Ue[Y+(x+1&0xff)];
                abov = Ue[x+ydown];
                down = Ue[x+yabov];
                ui = Ui[i];
                ve = Ve[i];
                Lp = Se*(prev+next+abov+down)+Ce*ue;
                dUe = lookup_F(Aee*Lp-Aei*ui-Be*ve+se+weakrand()*Ne)-ue;
                dUi = lookup_F(Aie*ue-Hi)-ui;
                v = ue-ve;
                dVe = v;
                if (v>0) dVe += Ga*v;
                Ue[i] += dUe*tet;
                Ui[i] += dUi*tit;
                Ve[i] += dVe*tat;
            }
        }
        _mean_Ve_ = tallyAE / (H*W);
    }
    
    //http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    (function() {
    var lastTime = 0;
    var vendors = ['webkit', 'moz'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame  =
          window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
    }
    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() { callback(currTime + timeToCall); }, timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id) { clearTimeout(id); };
    }());


    var timestep = 0;
    var frametime = +new Date(); // unary + is an integer cast here
    var framedelayms = 25;
    var nextframe = frametime+framedelayms;
    var frameskip = 1;
    var refresh = 0; 
    function iterate() {        
        if (refresh<1) {
            refresh++;
            if (running) requestAnimationFrame(iterate);
            return;
        }
        refresh=0;
        try {
		    for (var i=0; i<controls.length; i++) {
		        var control = controls[i];
		        eval(control.name+'='+control.value);
		    }
        } catch (err) {console.log(err.message);}
        try {
            seedrand();
            updateState(timestep*dt);
            timestep += 1;
        } catch (err) {console.log(err.message);}
        if (frameskip>=display_every) {
            showSim();
            frameskip=0;
        } else frameskip++;
        if (running) requestAnimationFrame(iterate);
    }
    
    canvas.onmousedown = function(e) {
        if (running) stop();
        else start();
    };
    
    hidingframe.style.display = "none";
    clickblock.style.display  = "none";
    clickblock.style.cursor   = "pointer";
    var startfun = function(e) { 
        canvasoverlay.style.display = "none";
        clickblock.style.display    = "none";
        start();
    };
    clickblock.onclick = startfun;
    canvasoverlay.onclick = startfun;    
    console.log('Initialization complete');
}

function waitForMathJax() {
    console.log('Waiting for MathJax to load');
    try {
        MathJax.Hub.Queue(["Typeset",MathJax.Hub]); 
        MathJax.Hub.Queue(main);
    } catch(e) {
        console.log('MathJax is missing, continuing without it');
        main();
    }
}


</script>

</body>
</html>



